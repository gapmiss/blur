/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  buildPostProcessor: () => buildPostProcessor,
  default: () => BlurPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var BlurPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.registerMarkdownCodeBlockProcessor("blur", this.blurBlockHandler.bind(this, null));
    this.registerMarkdownCodeBlockProcessor("blur-brick", this.blurBlockHandler.bind(this, null));
    this.registerMarkdownCodeBlockProcessor("blur-bone", this.blurBlockHandler.bind(this, null));
    this.registerMarkdownPostProcessor(buildPostProcessor());
    console.log("%c Obsidian Blur Plugin loaded", "color:lime;");
  }
  onunload() {
    console.log("%c Obsidian Blur Plugin unloaded", "color:lime;");
  }
  async blurBlockHandler(type, source, el, ctx) {
    const element = document.createRange().createContextualFragment(source);
    if (el.className === "block-language-blur-brick") {
      const block = el.createEl("div", { cls: "blur-brick-block" });
      let inputElement;
      inputElement = block.createEl("div", { text: "", cls: "blur-brick-innerblock" });
      source.split(/\W+/).forEach((w) => {
        let word = w.trim();
        if (word !== "") {
          inputElement.appendChild(createEl("code", { text: word, cls: "blur-brick" }));
        }
      });
    } else if (el.className === "block-language-blur-bone") {
      const block = el.createEl("div", { cls: "blur-bone-block" });
      let inputElement;
      inputElement = block.createEl("div", { text: "", cls: "blur-bone-innerblock" });
      source.split(/\W+/).forEach((w) => {
        let word = w.trim();
        if (word !== "") {
          inputElement.appendChild(createEl("code", { text: word, cls: "blur-bone" }));
        }
      });
    } else if (el.className === "block-language-blur") {
      const block = el.createEl("div", { cls: "blur-block" });
      let inputElement;
      inputElement = block.createEl("div", { text: source, cls: "blur-innerblock" });
    }
  }
};
function buildPostProcessor() {
  return (el) => {
    el.findAll("code").forEach((code) => {
      let text = code.innerText.trim();
      if (text.startsWith("~[]")) {
        let blur = text.substring(3).trim();
        code.addClass("blur-brick");
        code.innerText = blur;
      } else if (text.startsWith("~{}")) {
        let blur = text.substring(3).trim();
        code.addClass("blur-inline");
        code.innerText = blur;
      } else if (text.startsWith("~()")) {
        let blur = text.substring(3).trim();
        code.addClass("blur-bone");
        code.innerText = blur;
      }
    });
  };
}
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgTWFya2Rvd25Qb3N0UHJvY2Vzc29yLCBQbHVnaW59IGZyb20gJ29ic2lkaWFuJztcblxuaW50ZXJmYWNlIEJsdXJQbHVnaW5TZXR0aW5ncyB7XG5cdG15U2V0dGluZzogc3RyaW5nO1xufVxuXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBCbHVyUGx1Z2luU2V0dGluZ3MgPSB7XG5cdG15U2V0dGluZzogJ2RlZmF1bHQnXG59XG5cbmVudW0gQ29tcG9uZW50Q2hvaWNlIHtcblx0RGVmYXVsdCA9IFwiRGVmYXVsdFwiLFxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCbHVyUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcblxuICBzZXR0aW5nczogQmx1clBsdWdpblNldHRpbmdzO1xuXG4gIGFzeW5jIG9ubG9hZCgpIHtcblx0XHR0aGlzLnJlZ2lzdGVyTWFya2Rvd25Db2RlQmxvY2tQcm9jZXNzb3IoXCJibHVyXCIsIHRoaXMuYmx1ckJsb2NrSGFuZGxlci5iaW5kKHRoaXMsIG51bGwpKTtcblx0XHR0aGlzLnJlZ2lzdGVyTWFya2Rvd25Db2RlQmxvY2tQcm9jZXNzb3IoXCJibHVyLWJyaWNrXCIsIHRoaXMuYmx1ckJsb2NrSGFuZGxlci5iaW5kKHRoaXMsIG51bGwpKTtcblx0XHR0aGlzLnJlZ2lzdGVyTWFya2Rvd25Db2RlQmxvY2tQcm9jZXNzb3IoXCJibHVyLWJvbmVcIiwgdGhpcy5ibHVyQmxvY2tIYW5kbGVyLmJpbmQodGhpcywgbnVsbCkpO1xuXHRcdHRoaXMucmVnaXN0ZXJNYXJrZG93blBvc3RQcm9jZXNzb3IoXG5cdFx0XHRidWlsZFBvc3RQcm9jZXNzb3IoKVxuXHRcdCk7XG5cdFx0Y29uc29sZS5sb2coXCIlYyBPYnNpZGlhbiBCbHVyIFBsdWdpbiBsb2FkZWRcIiwgJ2NvbG9yOmxpbWU7Jyk7XG5cdH1cblxuICBvbnVubG9hZCgpIHtcblx0XHRjb25zb2xlLmxvZyhcIiVjIE9ic2lkaWFuIEJsdXIgUGx1Z2luIHVubG9hZGVkXCIsICdjb2xvcjpsaW1lOycpO1xuXHR9XG5cbiAgYXN5bmMgYmx1ckJsb2NrSGFuZGxlcih0eXBlOiBDb21wb25lbnRDaG9pY2UsIHNvdXJjZTogc3RyaW5nLCBlbDogSFRNTEVsZW1lbnQsIGN0eDogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICBjb25zdCBlbGVtZW50OmFueSA9IGRvY3VtZW50LmNyZWF0ZVJhbmdlKCkuY3JlYXRlQ29udGV4dHVhbEZyYWdtZW50KHNvdXJjZSlcbiAgICBpZiAoZWwuY2xhc3NOYW1lPT09J2Jsb2NrLWxhbmd1YWdlLWJsdXItYnJpY2snKSB7XG4gICAgICBjb25zdCBibG9jayA9IGVsLmNyZWF0ZUVsKFwiZGl2XCIsIHtjbHM6IFwiYmx1ci1icmljay1ibG9ja1wifSlcbiAgICAgIGxldCBpbnB1dEVsZW1lbnQ6IEhUTUxFbGVtZW50XG4gICAgICBpbnB1dEVsZW1lbnQgPSBibG9jay5jcmVhdGVFbChcImRpdlwiLCB7dGV4dDogJycsIGNsczogXCJibHVyLWJyaWNrLWlubmVyYmxvY2tcIn0pXG4gICAgICBzb3VyY2Uuc3BsaXQoL1xcVysvKS5mb3JFYWNoKCh3OnN0cmluZykgPT4ge1xuICAgICAgICBsZXQgd29yZCA9IHcudHJpbSgpO1xuICAgICAgICBpZiAod29yZCAhPT0gJycpIHtcbiAgICAgICAgICBpbnB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQoY3JlYXRlRWwoJ2NvZGUnLCB7dGV4dDogd29yZCwgY2xzOiBcImJsdXItYnJpY2tcIiB9KSk7IFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgICBlbHNlIGlmIChlbC5jbGFzc05hbWU9PT0nYmxvY2stbGFuZ3VhZ2UtYmx1ci1ib25lJykge1xuICAgICAgY29uc3QgYmxvY2sgPSBlbC5jcmVhdGVFbChcImRpdlwiLCB7Y2xzOiBcImJsdXItYm9uZS1ibG9ja1wifSlcbiAgICAgIGxldCBpbnB1dEVsZW1lbnQ6IEhUTUxFbGVtZW50XG4gICAgICBpbnB1dEVsZW1lbnQgPSBibG9jay5jcmVhdGVFbChcImRpdlwiLCB7dGV4dDogJycsIGNsczogXCJibHVyLWJvbmUtaW5uZXJibG9ja1wifSlcbiAgICAgIHNvdXJjZS5zcGxpdCgvXFxXKy8pLmZvckVhY2goKHc6c3RyaW5nKSA9PiB7XG4gICAgICAgIGxldCB3b3JkID0gdy50cmltKCk7XG4gICAgICAgIGlmICh3b3JkICE9PSAnJykge1xuICAgICAgICAgIGlucHV0RWxlbWVudC5hcHBlbmRDaGlsZChjcmVhdGVFbCgnY29kZScsIHt0ZXh0OiB3b3JkLCBjbHM6IFwiYmx1ci1ib25lXCJ9KSk7IFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cbiAgICBlbHNlIGlmIChlbC5jbGFzc05hbWU9PT0nYmxvY2stbGFuZ3VhZ2UtYmx1cicpIHtcbiAgICAgIGNvbnN0IGJsb2NrID0gZWwuY3JlYXRlRWwoXCJkaXZcIiwge2NsczogXCJibHVyLWJsb2NrXCJ9KVxuICAgICAgbGV0IGlucHV0RWxlbWVudDogSFRNTEVsZW1lbnRcbiAgICAgIGlucHV0RWxlbWVudCA9IGJsb2NrLmNyZWF0ZUVsKFwiZGl2XCIsIHt0ZXh0OiBzb3VyY2UsIGNsczogXCJibHVyLWlubmVyYmxvY2tcIn0pXG4gICAgfVxuXHR9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBidWlsZFBvc3RQcm9jZXNzb3IoKTogTWFya2Rvd25Qb3N0UHJvY2Vzc29yIHtcblx0cmV0dXJuIChlbCkgPT4ge1xuICAgIGVsLmZpbmRBbGwoXCJjb2RlXCIpLmZvckVhY2goKGNvZGUpID0+IHtcbiAgICAgIGxldCB0ZXh0ID0gY29kZS5pbm5lclRleHQudHJpbSgpO1xuICAgICAgaWYgKHRleHQuc3RhcnRzV2l0aCgnfltdJykpIHtcbiAgICAgICAgbGV0IGJsdXIgPSB0ZXh0LnN1YnN0cmluZygzKS50cmltKCk7XG4gICAgICAgIGNvZGUuYWRkQ2xhc3MoJ2JsdXItYnJpY2snKTtcbiAgICAgICAgY29kZS5pbm5lclRleHQ9Ymx1cjtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHRleHQuc3RhcnRzV2l0aCgnfnt9JykpIHtcbiAgICAgICAgbGV0IGJsdXIgPSB0ZXh0LnN1YnN0cmluZygzKS50cmltKCk7XG4gICAgICAgICAgY29kZS5hZGRDbGFzcygnYmx1ci1pbmxpbmUnKTtcbiAgICAgICAgICBjb2RlLmlubmVyVGV4dD1ibHVyO1xuICAgICAgfVxuICAgICAgZWxzZSBpZiAodGV4dC5zdGFydHNXaXRoKFwifigpXCIpKSB7XG4gICAgICAgIGxldCBibHVyID0gdGV4dC5zdWJzdHJpbmcoMykudHJpbSgpO1xuICAgICAgICAgIGNvZGUuYWRkQ2xhc3MoJ2JsdXItYm9uZScpO1xuICAgICAgICAgIGNvZGUuaW5uZXJUZXh0PWJsdXI7XG4gICAgICB9XG4gICAgfSlcbiAgfVxufSJdLAogICJtYXBwaW5ncyI6ICI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBO0FBQUE7QUFBQTtBQUFBO0FBQUE7QUFBQTtBQUFBLHNCQUE2QztBQWM3QyxJQUFxQixhQUFyQixjQUF3Qyx1QkFBTztBQUFBLEVBSTdDLE1BQU0sU0FBUztBQUNmLFNBQUssbUNBQW1DLFFBQVEsS0FBSyxpQkFBaUIsS0FBSyxNQUFNLElBQUksQ0FBQztBQUN0RixTQUFLLG1DQUFtQyxjQUFjLEtBQUssaUJBQWlCLEtBQUssTUFBTSxJQUFJLENBQUM7QUFDNUYsU0FBSyxtQ0FBbUMsYUFBYSxLQUFLLGlCQUFpQixLQUFLLE1BQU0sSUFBSSxDQUFDO0FBQzNGLFNBQUssOEJBQ0osbUJBQW1CLENBQ3BCO0FBQ0EsWUFBUSxJQUFJLGtDQUFrQyxhQUFhO0FBQUEsRUFDNUQ7QUFBQSxFQUVDLFdBQVc7QUFDWCxZQUFRLElBQUksb0NBQW9DLGFBQWE7QUFBQSxFQUM5RDtBQUFBLEVBRUMsTUFBTSxpQkFBaUIsTUFBdUIsUUFBZ0IsSUFBaUIsS0FBd0I7QUFDckcsVUFBTSxVQUFjLFNBQVMsWUFBWSxFQUFFLHlCQUF5QixNQUFNO0FBQzFFLFFBQUksR0FBRyxjQUFZLDZCQUE2QjtBQUM5QyxZQUFNLFFBQVEsR0FBRyxTQUFTLE9BQU8sRUFBQyxLQUFLLG1CQUFrQixDQUFDO0FBQzFELFVBQUk7QUFDSixxQkFBZSxNQUFNLFNBQVMsT0FBTyxFQUFDLE1BQU0sSUFBSSxLQUFLLHdCQUF1QixDQUFDO0FBQzdFLGFBQU8sTUFBTSxLQUFLLEVBQUUsUUFBUSxDQUFDLE1BQWE7QUFDeEMsWUFBSSxPQUFPLEVBQUUsS0FBSztBQUNsQixZQUFJLFNBQVMsSUFBSTtBQUNmLHVCQUFhLFlBQVksU0FBUyxRQUFRLEVBQUMsTUFBTSxNQUFNLEtBQUssYUFBYSxDQUFDLENBQUM7QUFBQSxRQUM3RTtBQUFBLE1BQ0YsQ0FBQztBQUFBLElBQ0gsV0FDUyxHQUFHLGNBQVksNEJBQTRCO0FBQ2xELFlBQU0sUUFBUSxHQUFHLFNBQVMsT0FBTyxFQUFDLEtBQUssa0JBQWlCLENBQUM7QUFDekQsVUFBSTtBQUNKLHFCQUFlLE1BQU0sU0FBUyxPQUFPLEVBQUMsTUFBTSxJQUFJLEtBQUssdUJBQXNCLENBQUM7QUFDNUUsYUFBTyxNQUFNLEtBQUssRUFBRSxRQUFRLENBQUMsTUFBYTtBQUN4QyxZQUFJLE9BQU8sRUFBRSxLQUFLO0FBQ2xCLFlBQUksU0FBUyxJQUFJO0FBQ2YsdUJBQWEsWUFBWSxTQUFTLFFBQVEsRUFBQyxNQUFNLE1BQU0sS0FBSyxZQUFXLENBQUMsQ0FBQztBQUFBLFFBQzNFO0FBQUEsTUFDRixDQUFDO0FBQUEsSUFDSCxXQUNTLEdBQUcsY0FBWSx1QkFBdUI7QUFDN0MsWUFBTSxRQUFRLEdBQUcsU0FBUyxPQUFPLEVBQUMsS0FBSyxhQUFZLENBQUM7QUFDcEQsVUFBSTtBQUNKLHFCQUFlLE1BQU0sU0FBUyxPQUFPLEVBQUMsTUFBTSxRQUFRLEtBQUssa0JBQWlCLENBQUM7QUFBQSxJQUM3RTtBQUFBLEVBQ0g7QUFDRDtBQUVPLDhCQUFxRDtBQUMzRCxTQUFPLENBQUMsT0FBTztBQUNaLE9BQUcsUUFBUSxNQUFNLEVBQUUsUUFBUSxDQUFDLFNBQVM7QUFDbkMsVUFBSSxPQUFPLEtBQUssVUFBVSxLQUFLO0FBQy9CLFVBQUksS0FBSyxXQUFXLEtBQUssR0FBRztBQUMxQixZQUFJLE9BQU8sS0FBSyxVQUFVLENBQUMsRUFBRSxLQUFLO0FBQ2xDLGFBQUssU0FBUyxZQUFZO0FBQzFCLGFBQUssWUFBVTtBQUFBLE1BQ2pCLFdBQ1MsS0FBSyxXQUFXLEtBQUssR0FBRztBQUMvQixZQUFJLE9BQU8sS0FBSyxVQUFVLENBQUMsRUFBRSxLQUFLO0FBQ2hDLGFBQUssU0FBUyxhQUFhO0FBQzNCLGFBQUssWUFBVTtBQUFBLE1BQ25CLFdBQ1MsS0FBSyxXQUFXLEtBQUssR0FBRztBQUMvQixZQUFJLE9BQU8sS0FBSyxVQUFVLENBQUMsRUFBRSxLQUFLO0FBQ2hDLGFBQUssU0FBUyxXQUFXO0FBQ3pCLGFBQUssWUFBVTtBQUFBLE1BQ25CO0FBQUEsSUFDRixDQUFDO0FBQUEsRUFDSDtBQUNGOyIsCiAgIm5hbWVzIjogW10KfQo=
