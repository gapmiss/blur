/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  buildPostProcessor: () => buildPostProcessor,
  default: () => BlurPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var BlurPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.registerMarkdownCodeBlockProcessor("blur", this.blurBlockHandler.bind(this, null));
    this.registerMarkdownCodeBlockProcessor("blur-brick", this.blurBlockHandler.bind(this, null));
    this.registerMarkdownCodeBlockProcessor("blur-bone", this.blurBlockHandler.bind(this, null));
    this.registerMarkdownPostProcessor(buildPostProcessor());
    console.log("%c Obsidian Blur Plugin loaded", "color:lime;");
  }
  onunload() {
    console.log("%c Obsidian Blur Plugin unloaded", "color:lime;");
  }
  async blurBlockHandler(type, source, el, ctx) {
    if (el.className === "block-language-blur-brick") {
      const block = el.createEl("div", { cls: "blur-brick-block" });
      let inputElement;
      inputElement = block.createEl("div", { text: "", cls: "blur-brick-innerblock" });
      source.split(/\W+/).forEach((w) => {
        let word = w.trim();
        if (word !== "") {
          inputElement.appendChild(createEl("code", { text: word.replace(/[^\s]/g, "\u2588"), cls: "blur-brick" }));
        }
      });
    } else if (el.className === "block-language-blur-bone") {
      const block = el.createEl("div", { cls: "blur-bone-block" });
      let inputElement;
      inputElement = block.createEl("div", { text: "", cls: "blur-bone-innerblock" });
      source.split(/\W+/).forEach((w) => {
        let word = w.trim();
        if (word !== "") {
          inputElement.appendChild(createEl("code", { text: word, cls: "blur-bone" }));
        }
      });
    } else if (el.className === "block-language-blur") {
      const block = el.createEl("div", { cls: "blur-block" });
      let inputElement;
      inputElement = block.createEl("div", { text: "", cls: "blur-innerblock" });
      source.split(/\W+/).forEach((w) => {
        let word = w.trim();
        if (word !== "") {
          inputElement.appendChild(createEl("code", { text: word, cls: "blur-inline" }));
        }
      });
    }
  }
};
function buildPostProcessor() {
  return (el) => {
    el.findAll("code").forEach((code) => {
      let text = code.innerText.trim();
      if (text.startsWith("~[") && text.endsWith("]")) {
        let part = text.substring(1);
        let content = part.substring(part.length - 1, 1);
        code.addClass("blur-brick");
        code.innerText = content.replace(/[^\s]/g, "\u2588");
      } else if (text.startsWith("~(") && text.endsWith(")")) {
        let part = text.substring(1);
        let content = part.substring(part.length - 1, 1);
        code.addClass("blur-bone");
        code.innerText = content;
      } else if (text.startsWith("~{") && text.endsWith("}")) {
        let part = text.substring(1);
        let content = part.substring(part.length - 1, 1);
        code.addClass("blur-inline");
        code.innerText = content;
      }
    });
  };
}
//# sourceMappingURL=data:application/json;base64,ewogICJ2ZXJzaW9uIjogMywKICAic291cmNlcyI6IFsibWFpbi50cyJdLAogICJzb3VyY2VzQ29udGVudCI6IFsiaW1wb3J0IHsgTWFya2Rvd25Qb3N0UHJvY2Vzc29yLCBQbHVnaW59IGZyb20gJ29ic2lkaWFuJztcblxuaW50ZXJmYWNlIEJsdXJQbHVnaW5TZXR0aW5ncyB7XG5cdG15U2V0dGluZzogc3RyaW5nO1xufVxuXG5jb25zdCBERUZBVUxUX1NFVFRJTkdTOiBCbHVyUGx1Z2luU2V0dGluZ3MgPSB7XG5cdG15U2V0dGluZzogJ2RlZmF1bHQnXG59XG5cbmVudW0gQ29tcG9uZW50Q2hvaWNlIHtcblx0RGVmYXVsdCA9IFwiRGVmYXVsdFwiLFxufVxuXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCbHVyUGx1Z2luIGV4dGVuZHMgUGx1Z2luIHtcblxuICBzZXR0aW5nczogQmx1clBsdWdpblNldHRpbmdzO1xuXG4gIGFzeW5jIG9ubG9hZCgpIHtcblx0XHR0aGlzLnJlZ2lzdGVyTWFya2Rvd25Db2RlQmxvY2tQcm9jZXNzb3IoXCJibHVyXCIsIHRoaXMuYmx1ckJsb2NrSGFuZGxlci5iaW5kKHRoaXMsIG51bGwpKTtcblx0XHR0aGlzLnJlZ2lzdGVyTWFya2Rvd25Db2RlQmxvY2tQcm9jZXNzb3IoXCJibHVyLWJyaWNrXCIsIHRoaXMuYmx1ckJsb2NrSGFuZGxlci5iaW5kKHRoaXMsIG51bGwpKTtcblx0XHR0aGlzLnJlZ2lzdGVyTWFya2Rvd25Db2RlQmxvY2tQcm9jZXNzb3IoXCJibHVyLWJvbmVcIiwgdGhpcy5ibHVyQmxvY2tIYW5kbGVyLmJpbmQodGhpcywgbnVsbCkpO1xuXHRcdHRoaXMucmVnaXN0ZXJNYXJrZG93blBvc3RQcm9jZXNzb3IoXG5cdFx0XHRidWlsZFBvc3RQcm9jZXNzb3IoKVxuXHRcdCk7XG5cdFx0Y29uc29sZS5sb2coXCIlYyBPYnNpZGlhbiBCbHVyIFBsdWdpbiBsb2FkZWRcIiwgJ2NvbG9yOmxpbWU7Jyk7XG5cdH1cblxuICBvbnVubG9hZCgpIHtcblx0XHRjb25zb2xlLmxvZyhcIiVjIE9ic2lkaWFuIEJsdXIgUGx1Z2luIHVubG9hZGVkXCIsICdjb2xvcjpsaW1lOycpO1xuXHR9XG5cbiAgYXN5bmMgYmx1ckJsb2NrSGFuZGxlcih0eXBlOiBDb21wb25lbnRDaG9pY2UsIHNvdXJjZTogc3RyaW5nLCBlbDogSFRNTEVsZW1lbnQsIGN0eDogYW55KTogUHJvbWlzZTxhbnk+IHtcbiAgICBpZiAoZWwuY2xhc3NOYW1lPT09J2Jsb2NrLWxhbmd1YWdlLWJsdXItYnJpY2snKSB7XG4gICAgICBjb25zdCBibG9jayA9IGVsLmNyZWF0ZUVsKFwiZGl2XCIsIHtjbHM6IFwiYmx1ci1icmljay1ibG9ja1wifSlcbiAgICAgIGxldCBpbnB1dEVsZW1lbnQ6IEhUTUxFbGVtZW50XG4gICAgICBpbnB1dEVsZW1lbnQgPSBibG9jay5jcmVhdGVFbChcImRpdlwiLCB7dGV4dDogJycsIGNsczogXCJibHVyLWJyaWNrLWlubmVyYmxvY2tcIn0pXG4gICAgICBzb3VyY2Uuc3BsaXQoL1xcVysvKS5mb3JFYWNoKCh3OnN0cmluZykgPT4ge1xuICAgICAgICBsZXQgd29yZCA9IHcudHJpbSgpO1xuICAgICAgICBpZiAod29yZCAhPT0gJycpIHtcbiAgICAgICAgICAvL3JlZGFjdCB3LyBjaGFyICdcdTI1ODgnICAmYmxvY2s7IFx1MjU4OFxuICAgICAgICAgIGlucHV0RWxlbWVudC5hcHBlbmRDaGlsZChjcmVhdGVFbCgnY29kZScsIHt0ZXh0OiB3b3JkLnJlcGxhY2UoL1teXFxzXS9nLCAnXHUyNTg4JyksIGNsczogXCJibHVyLWJyaWNrXCIgfSkpOyBcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gICAgZWxzZSBpZiAoZWwuY2xhc3NOYW1lPT09J2Jsb2NrLWxhbmd1YWdlLWJsdXItYm9uZScpIHtcbiAgICAgIGNvbnN0IGJsb2NrID0gZWwuY3JlYXRlRWwoXCJkaXZcIiwge2NsczogXCJibHVyLWJvbmUtYmxvY2tcIn0pXG4gICAgICBsZXQgaW5wdXRFbGVtZW50OiBIVE1MRWxlbWVudFxuICAgICAgaW5wdXRFbGVtZW50ID0gYmxvY2suY3JlYXRlRWwoXCJkaXZcIiwge3RleHQ6ICcnLCBjbHM6IFwiYmx1ci1ib25lLWlubmVyYmxvY2tcIn0pXG4gICAgICBzb3VyY2Uuc3BsaXQoL1xcVysvKS5mb3JFYWNoKCh3OnN0cmluZykgPT4ge1xuICAgICAgICBsZXQgd29yZCA9IHcudHJpbSgpO1xuICAgICAgICBpZiAod29yZCAhPT0gJycpIHtcbiAgICAgICAgICBpbnB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQoY3JlYXRlRWwoJ2NvZGUnLCB7dGV4dDogd29yZCwgY2xzOiBcImJsdXItYm9uZVwifSkpOyBcbiAgICAgICAgfVxuICAgICAgfSlcbiAgICB9XG4gICAgZWxzZSBpZiAoZWwuY2xhc3NOYW1lPT09J2Jsb2NrLWxhbmd1YWdlLWJsdXInKSB7XG4gICAgICBjb25zdCBibG9jayA9IGVsLmNyZWF0ZUVsKFwiZGl2XCIsIHtjbHM6IFwiYmx1ci1ibG9ja1wifSlcbiAgICAgIGxldCBpbnB1dEVsZW1lbnQ6IEhUTUxFbGVtZW50XG4gICAgICBpbnB1dEVsZW1lbnQgPSBibG9jay5jcmVhdGVFbChcImRpdlwiLCB7dGV4dDogJycsIGNsczogXCJibHVyLWlubmVyYmxvY2tcIn0pXG4gICAgICBzb3VyY2Uuc3BsaXQoL1xcVysvKS5mb3JFYWNoKCh3OnN0cmluZykgPT4ge1xuICAgICAgICBsZXQgd29yZCA9IHcudHJpbSgpO1xuICAgICAgICBpZiAod29yZCAhPT0gJycpIHtcbiAgICAgICAgICBpbnB1dEVsZW1lbnQuYXBwZW5kQ2hpbGQoY3JlYXRlRWwoJ2NvZGUnLCB7dGV4dDogd29yZCwgY2xzOiBcImJsdXItaW5saW5lXCJ9KSk7IFxuICAgICAgICB9XG4gICAgICB9KVxuICAgIH1cblx0fVxufVxuXG5leHBvcnQgZnVuY3Rpb24gYnVpbGRQb3N0UHJvY2Vzc29yKCk6IE1hcmtkb3duUG9zdFByb2Nlc3NvciB7XG5cdHJldHVybiAoZWwpID0+IHtcbiAgICBlbC5maW5kQWxsKFwiY29kZVwiKS5mb3JFYWNoKChjb2RlKSA9PiB7XG4gICAgICBsZXQgdGV4dCA9IGNvZGUuaW5uZXJUZXh0LnRyaW0oKTtcbiAgICAgIGlmICh0ZXh0LnN0YXJ0c1dpdGgoJ35bJykgJiYgdGV4dC5lbmRzV2l0aCgnXScpKSB7XG4gICAgICAgIGxldCBwYXJ0ID0gdGV4dC5zdWJzdHJpbmcoMSk7XG4gICAgICAgIGxldCBjb250ZW50ID0gcGFydC5zdWJzdHJpbmcocGFydC5sZW5ndGgtMSwxKTtcbiAgICAgICAgY29kZS5hZGRDbGFzcygnYmx1ci1icmljaycpO1xuICAgICAgICAvL3JlZGFjdCB3LyBjaGFyICdcdTI1ODgnICAmYmxvY2s7IFx1MjU4OFxuICAgICAgICBjb2RlLmlubmVyVGV4dD1jb250ZW50LnJlcGxhY2UoL1teXFxzXS9nLCAnXHUyNTg4Jyk7XG4gICAgICB9XG4gICAgICBlbHNlIGlmICh0ZXh0LnN0YXJ0c1dpdGgoXCJ+KFwiKSAmJiB0ZXh0LmVuZHNXaXRoKCcpJykpIHtcbiAgICAgICAgbGV0IHBhcnQgPSB0ZXh0LnN1YnN0cmluZygxKTtcbiAgICAgICAgbGV0IGNvbnRlbnQgPSBwYXJ0LnN1YnN0cmluZyhwYXJ0Lmxlbmd0aC0xLDEpO1xuICAgICAgICBjb2RlLmFkZENsYXNzKCdibHVyLWJvbmUnKTtcbiAgICAgICAgY29kZS5pbm5lclRleHQ9Y29udGVudDtcbiAgICAgIH1cbiAgICAgIGVsc2UgaWYgKHRleHQuc3RhcnRzV2l0aCgnfnsnKSAmJiB0ZXh0LmVuZHNXaXRoKCd9JykpIHtcbiAgICAgICAgbGV0IHBhcnQgPSB0ZXh0LnN1YnN0cmluZygxKTtcbiAgICAgICAgbGV0IGNvbnRlbnQgPSBwYXJ0LnN1YnN0cmluZyhwYXJ0Lmxlbmd0aC0xLDEpO1xuICAgICAgICBjb2RlLmFkZENsYXNzKCdibHVyLWlubGluZScpO1xuICAgICAgICBjb2RlLmlubmVyVGV4dD1jb250ZW50O1xuICAgICAgfVxuICAgIH0pXG4gIH1cbn0iXSwKICAibWFwcGluZ3MiOiAi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
